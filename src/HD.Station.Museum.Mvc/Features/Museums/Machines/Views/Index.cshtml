@model MachinesIndexViewModel
@using System.Dynamic;
@{
    ViewData["Title"] = Localizer["Storage Location"];
}

<div class="flextable table-actions  p-l-0">
    <div class="flextable-item">
        <div class="btn-toolbar-item input-with-icon" style="width: 70%; max-width: 600px;">
            <span class="icon icon-search"></span>
            <input type="search" id="filterText" class="form-control input-block " value="@Model.Filter" placeholder="@Localizer["Search..."]">
        </div>
        <div class="btn-toolbar-item input-with-icon">
            <button id="clearFilter" class="btn btn-primary-outline" icon-name="erase"></button>
        </div>
    </div>
</div>
<div id="quotaModal" class="modal fade" tabindex="-1" role="dialog">

</div>
@{
    var properties = typeof(MachinesViewModel).GetProperties().OrderBy(p => p.GetCustomAttribute<GridDisplayAttribute>()?.Order ?? 999);
    List<object> mockList = new List<object> { };
    var groupable = false;
    var groups = new List<object>();
}
@(Html.Kendo()
    .Grid(mockList)
    .Name("grid")
    .Columns(columns =>
    {
        foreach (var property in properties)
        {
            if (property.HasCustomAttribute<GridDisplayAttribute>(false))
            {
                var attr = property.GetCustomAttribute<GridDisplayAttribute>();
                var name = attr.Name ?? property.Name;
                var bound = columns.Bound(name)
                                   .Sortable(attr.Sortable)
                                   .Filterable(attr.Filterable)
                                   .Title(attr.Title ?? property.Name)
                                   .Width(attr.Width)
                                   .Groupable(attr.Groupable);

                if (attr.Groupable) { groupable = true; groups.Add(new { field = name }); }

                if (!string.IsNullOrWhiteSpace(attr.Template))
                {
                    bound.ClientTemplate(attr.Template);
                }
                else
                if (typeof(bool).IsAssignableFrom(property.PropertyType))
                {
                    bound
                    .ClientTemplate($"<input type='checkbox' #={property.Name} ? 'checked=checked' : '' # disabled='disabled' />");
                }
                var attrs = property.HtmlAttrs<GridDisplayAttribute>();

                if (attrs != null)
                {
                    var a = new ExpandoObject();
                    foreach (var kvp in attrs)
                    {
                        ((ICollection<KeyValuePair<string, object>>)a)
                        .Add(new KeyValuePair<string, object>(kvp.Key, kvp.Value));
                    }
                    dynamic attrsObj = a;
                    bound.HeaderHtmlAttributes(attrsObj)
                         .HtmlAttributes(attrsObj)
                    ;
                }
            }
            else
            {
                columns.Bound(property.Name).Hidden();
            }
        }
        var baseUrl = Url.Action("Index");

        var quotaMUrl = Url.Action("QuotaManager");
        var quotaBtn = string.Format("<button id='btnQuotaManager' onClick="+ "LoadQuota('#: Id #')" + " class='btn btn-sm btn-success-outline'><span class='icon icon-tools'></span></button>",
        quotaMUrl, Localizer["Quota Manager"].Value);

        var details = string.Format("<a class='btn btn-sm btn-info-outline' href='{0}/#: Id #'><span class='icon icon-action-detail'></span></a>",
        baseUrl, Localizer["Details"].Value);

        var edit = string.Format("<a class='btn btn-sm btn-primary-outline' data-toggle='modal' data-target='\\\\#editModal' data-id='#: Id #'><span class='icon icon-action-edit'></span></a>",
        baseUrl, Localizer["Edit"].Value);

        var delete = string.Format("<a class='btn btn-sm btn-danger-outline' href='{0}/#: Id #/Delete'><span class='icon icon-action-delete'></span></a>",
        baseUrl, Localizer["Delete"].Value);

        columns
        .Template("<div class='btn-group'>" + edit + details + delete + quotaBtn + "</div>")
        .HtmlAttributes(new { @class = "action-col" })
        .Width(350)
        .Title(" ");
    })
    .HtmlAttributes(new { @class = "k-grid-dynamic" })
    .Scrollable(scroll => scroll
    .Enabled(true)
    )
    .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(new int[] { 50, 100, 150 })
    .ButtonCount(5)
    )
    .Filterable()
    .Sortable()
    .Groupable(groupable)
    .Resizable(config => { config.Columns(true); })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(50)
    .Read(read => read.Action("Read", nameof(Machines)))
    )
    .Deferred()
)

<style>

    /* Medium Devices, Desktops */
    @@media only screen and (min-width : 992px) {
        #grid {
            height: calc(100% - 100px) !important;
        }
    }
</style>
<script>
    require(["jquery", 'kendo.grid.min', 'kendo.aspnetmvc.min','kendo.all.min'], function ($) {
        // put deferred grid javascript inside require
        @Html.Kendo().DeferredScriptsFor("grid", false);

        var getData = function () {
            return {
                filterText: $("#filterText").val(),
                includeDisabled: $("#filterDisabled").is(':checked')
            }
        }

        var refreshData = function () {
            var grid = $("#grid").data("kendoGrid");
            grid.dataSource.transport.options.read.data = getData;
            $("#grid").data("kendoGrid").dataSource.read();
            $("#grid").data("kendoGrid").refresh();
        }

        $("#filterDisabled").change(refreshData);
        $("#filterText").keypress(function (e) {
            var keyCode = e.keyCode ? e.keyCode : e.which;
            if (keyCode == 13 || keyCode == 10) {
                refreshData();
            }
        });

        $("#clearFilter").click(function () {
            $("#filterText").val("");
            refreshData();
        });

        $(document).on('shown.bs.modal', '#createModal', function (event) {
            console.log("shown modal event", event);
            var that = this;
            $(document).off('focusin.modal')
            
            $.ajax({
                /**/
                url: '@Url.Action("Create")',
                /**/
                type: "GET",
                data: { layout: "_ModalLayout" },
                success: function (data) {
                    $(".modal-content", that).html(data);
                }
            });
        });

        $(document).on('shown.bs.modal', '#editModal', function (event) {
            console.log("shown modal event", event);
            var button = $(event.relatedTarget); // Button that triggered the modal
            var enrollId = button.attr('data-id');
            console.log("shown modal event", enrollId);
            var that = this;
            $(document).off('focusin.modal')
            
            $.ajax({
                /**/
                url: '@Url.Action("Edit")',
                /**/
                type: "GET",
                data: { layout: "_ModalLayout", id: enrollId },
                success: function (data) {
                    $(".modal-content", that).html(data);
                }
            });
        });

        $("#createModal").on('hidden.bs.modal', function (event) {
            $('.div-modal').remove();
            console.log('HIDDEN MODAL EVENT', event);
        });
        $("#editModal").on('hidden.bs.modal', function (event) {
            $('.div-modal').remove();
            console.log('HIDDEN MODAL EVENT', event);
        });
    
    })
</script>
<script>
    function LoadQuota(idStorage) {
        console.log("Load Modal " + idStorage);
        $("#quotaModal").load('mediaassets/storagelocation/quotaManager?id=' + idStorage);
        $("#quotaModal").modal("show");
    }
</script>

<div id="createModal" class="modal fade  col-md-8 col-md-offset-2" tabindex="-1" role="dialog">
    <div class="modal-dialog w-full" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4>@Localizer["Create New Enrollment"]</h4>
            </div>
            <div class="modal-body">
                <div class="spinner overlay-loading">
                    <span></span>
                    <span class="rect2"></span>
                    <span class="rect3"></span>
                    <span class="rect4"></span>
                    <span class="rect5"></span>
                </div>
            </div>
            <div class="modal-footer">
                <div class="modal-actions col-md-offset-3 col-md-9">
                    <button icon-name="action-cancel" name="close" class="btn btn-default" data-dismiss="modal">
                        @Localizer["Close"]
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="editModal" class="modal fade  col-md-8 col-md-offset-2" tabindex="-1" role="dialog">
    <div class="modal-dialog w-full" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4>@Localizer["Edit Enrollment"]</h4>
            </div>
            <div class="modal-body">
                <div class="spinner overlay-loading">
                    <span></span>
                    <span class="rect2"></span>
                    <span class="rect3"></span>
                    <span class="rect4"></span>
                    <span class="rect5"></span>
                </div>
            </div>
            <div class="modal-footer">
                <div class="modal-actions col-md-offset-3 col-md-9">
                    <button icon-name="action-cancel" name="close" class="btn btn-default" data-dismiss="modal">
                        @Localizer["Close"]
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section navigation {
    <a icon-name="action-create" class="btn btn-primary-outline" data-toggle="modal" data-target="#createModal">
        @Localizer[$"Create {typeof(Machines).DisplayName()}"]
    </a>
}
